#!/usr/bin/python
# -*- coding:utf-8 -*-

from __future__ import print_function
from __future__ import unicode_literals
import os
import sys
from os.path import join, isfile, isdir, abspath


def option(command, default='__special_none__', mode=str):
    """Decorator to pass sys.argv to functions,
    imitates https://github.com/pallets/click
    """
    if type(mode) != type:
        raise ValueError('mode must be type')

    def decorate(fn):
        def wrapper(*args):
            opt = default
            if command in sys.argv:
                if mode == bool:
                    opt = True
                else:
                    li = []
                    for i in sys.argv[sys.argv.index(command) + 1:]:
                        if i.find('-') == 0:
                            break
                        li.append(i)
                    if mode == tuple:
                        opt = tuple(li)
                    elif len(li) > 0:
                        opt = mode(li[0])
                    elif default == '__special_none__':
                        print('Missing value for %s.' % command)
                        sys.exit(-2)
            elif default == '__special_none__':
                print("Missing option '%s'" % command)
                sys.exit(-1)
            return fn(*args + (opt,))
        return wrapper

    return decorate


help_text = """usage:
    {fn} <command> <args>
    or:  make <command> <arg_name>=<args>

commands:
    list		List exist topics
    list <topic>	List .files under this topic
    apply <topic>	Apply a topic of .files to its directory
    recover <topic>	Restore the situation before applying

    add <file> ...	Stage files in the BUFFER
    status		Display files you staged
    commit <topic> 	Store buffered files to a topic, then apply"""


def help_():
    print(help_text.format(fn=sys.argv[0]))


@option('list', default=None)
@option('-a', mode=bool, default=False)
def list_(topic=None, all_=False):
    if os.system('which tree > /dev/null') == 0:
        _list_tree(topic, all_)
    else:
        if topic is None:
            if all_:
                print(_gettopic())
            else:
                def f(string):
                    return string[0] != '_'
                a = list(filter(f, _gettopic()))
                print(a)
        else:
            print(_getfiles(_prefixtopic(topic)))


def _list_tree(topic, all_):
    PREFIX = 'tree -a --noreport '
    if topic is None:
        suffix = 'topic.*' if all_ else 'topic.[^_]*'
        os.system(PREFIX + suffix)
    else:
        os.system(PREFIX + _prefixtopic(topic))


# os.path.join('/opt/someplace', '/home/user/') returns the latter
def _rmslash(dir_):
    """Remove root slash"""
    if len(dir_) != 0 and dir_[0] == '/':
        return dir_[1:]
    return dir_


def _prefixtopic(topic):
    """Prefix with 'topic.' if not given"""
    return topic if topic.find('topic.') != -1 \
        else 'topic.' + topic


def _gettopic():
    file_and_dir = os.listdir('.')
    dironly = [i for i in file_and_dir
               if isdir(join('.', i))]
    topics = [i[len('topic.'):] for i in dironly if i.find('topic.') == 0]
    return topics


def _getfiles(topic):
    os.chdir(join('.', topic))
    dirs = os.walk('.')
    # os.walk returns a list of tuples,
    # every tuple is (root: str, dirs: list, files: list)
    # files = [f for i in dirs for f in i[2]]
    files = [join(i[0], f) for i in dirs for f in i[2]]
    os.chdir('..')
    return files


@option('apply')
def apply_(topic):
    """Apply a topic."""
    topic = _prefixtopic(topic)
    for f in _getfiles(topic):
        ori = abspath(join(topic, f))
        f = _there(_rpenv(f))
        print(ori)
        print('\033[1;32m{}\033[0m'.format(f))
        # make dir if not exist
        dir_ = _getdir(f)
        if not isdir(dir_):
            os.makedirs(dir_)
        # backup the file if already exist
        backup = f + '.BAK'
        if isfile(f):
            if not isfile(backup):
                os.rename(f, backup)
            else:
                os.remove(f)
        os.symlink(ori, f)


@option('recover')
def recover(topic):
    """Remove the link file, and recover from the .BAK file"""
    topic = _prefixtopic(topic)
    for f in _getfiles(topic):
        f = _there(_rpenv(f))
        backup = f + '.BAK'
        if isfile(f):
            os.remove(f)
        if isfile(backup):
            os.rename(backup, f)


def _getdir(fullname):
    """Get dir of a file"""
    return os.path.split(fullname)[0]


def _getshortname(fullname):
    """Get short name of a file"""
    return os.path.split(fullname)[1]


def _rpenv(string):
    """Replace env var with its value."""
    import re
    found = re.findall('\\${.*?}', string)
    if len(found) == 0:
        return string
    fn_value = string  # /home/user/.vimrc
    # bracketed environment variable
    for bkt_var in found:
        var = bkt_var[2:-1]  # remove ${}
        if var in os.environ:
            fn_value = fn_value.replace(bkt_var, os.environ[var])
        else:
            raise ValueError(
                'environment variable `${}` not exist'.format(bkt_var))
        return fn_value
    # TODO: indent of return?


def _rmhome(string):
    home = os.environ['HOME']
    if string.find(home) == 0:
        return string[len(home):]
    return join('ROOT', _rmslash(string))


def _here(there):
    # add relative file to abs path BUFFER
    abs_ = os.path.abspath(there)
    return join('BUFFER', _rmslash(_rmhome(abs_)))


def _there(here):
    if here.find('ROOT') in (0, 2):
        return here[here.index('ROOT') + len('ROOT'):]
    return join(os.environ['HOME'], here)


@option('add', mode=tuple)
def add(files):
    """Add file(s) into buffer."""
    if len(files) == 0:
        print('Nothing specified, nothing added.')
    else:
        from shutil import copyfile, copytree
        for f in files:
            before = abspath(_rpenv(f))
            after = _here(before)
            if isdir(before):
                copytree(before, after)
                return
            if not isdir(_getdir(after)):
                os.makedirs(_getdir(after))
            copyfile(before, after)


def status():
    if isdir('BUFFER') and len(_getfiles('BUFFER')) != 0:
        print('Files staged in the buffer:')
        print(_getfiles('BUFFER'))
    else:
        print('Nothing in the buffer.')


@option('save')
def save(topic):
    """Store the files in the buffer to a topic."""
    if not (isdir('BUFFER') and len(_getfiles('BUFFER')) != 0):
        print('Fatal: no file staged in the buffer')
        print('  (use `{} add <file> ...` to stage files)'.format(sys.argv[0]))
    else:
        for f in _getfiles('BUFFER'):
            os.renames(join('.', 'BUFFER', _rmslash(f)),
                       join(_prefixtopic(topic), _rmslash(f)))
        os.removedirs(join('.', 'BUFFER'))


@option('commit')
def commit(topic):
    # TODO: not avaliable due to decorator
    save(topic)
    apply_(topic)


if __name__ == '__main__':
    # display help if no args provided
    if len(sys.argv) < 2:
        help_()
        sys.exit(1)
    else:
        {'help': help_,
         'list': list_,
         'apply': apply_,
         'recover': recover,
         'add': add,
         'status': status,
         'commit': commit,
         'save': save}[sys.argv[1]]()
