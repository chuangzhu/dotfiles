#!/usr/bin/python
# -*- coding:utf-8 -*-

from __future__ import print_function
from __future__ import unicode_literals
import os
import sys
from os.path import join, isfile, isdir, abspath


def list_(topics=None, all_=False):
    if os.system('which tree > /dev/null') == 0:
        _list_tree(topics, all_)
    else:
        if not topics:
            if all_:
                print(_gettopic())
            else:
                def f(string):
                    return string[0] != '_'
                a = list(filter(f, _gettopic()))
                print(a)
        else:
            for t in topics:
                print(_getfiles(_prefixtopic(t)))


def _list_tree(topics, all_):
    PREFIX = 'tree -a --noreport '
    if not topics:
        suffix = 'topic.*' if all_ else 'topic.[!_]*'
        os.system(PREFIX + suffix)
    else:
        for t in topics:
            os.system(PREFIX + _prefixtopic(t))


# os.path.join('/opt/someplace', '/home/user/') returns the latter
def _rmslash(dir_):
    """Remove root slash"""
    if len(dir_) != 0 and dir_[0] == '/':
        return dir_[1:]
    return dir_


def _prefixtopic(topic):
    """Prefix with 'topic.' if not given"""
    return topic if topic.find('topic.') != -1 \
        else 'topic.' + topic


def _gettopic():
    file_and_dir = os.listdir('.')
    dironly = [i for i in file_and_dir
               if isdir(join('.', i))]
    topics = [i[len('topic.'):] for i in dironly if i.find('topic.') == 0]
    return topics


def _getfiles(topic):
    os.chdir(join('.', topic))
    dirs = os.walk('.')
    # os.walk returns a list of tuples,
    # every tuple is (root: str, dirs: list, files: list)
    # files = [f for i in dirs for f in i[2]]
    files = [join(i[0], f) for i in dirs for f in i[2]]
    os.chdir('..')
    return files


def _color(string, color=None, style=None):
    colors = {'r': 31,
              'g': 32,
              'y': 33,
              'b': 34,
              None: 0}
    styles = {'emphasis': 1,
              'hide': 2,
              None: 0}
    return '\033[{};{}m{}\033[0m'.format(colors[color],
                                         styles[style],
                                         string)


def apply_(topics):
    """Symlink some topics of dotfiles."""
    for topic in topics:
        topic = _prefixtopic(topic)
        for f in _getfiles(topic):
            ori = abspath(join(topic, f))
            f = _there(_rpenv(f))
            print(_color(f, 'g', 'emphasis'), end=' ')
            print(_color('-> '+ori, style='hide'))
            # make dir if not exist
            dir_ = _getdir(f)
            if not isdir(dir_):
                os.makedirs(dir_)
            # backup the file if already exist
            backup = f + '.BAK'
            if isfile(f):
                print(_color('WARNING', 'y', 'emphasis'), end='')
                print(": '{}' already existed,".format(f), end=' ')
                print("renaming to '{}'".format(_getshortname(backup)))
                if not isfile(backup):
                    os.rename(f, backup)
                else:
                    os.remove(f)
            os.symlink(ori, f)


def recover(topics):
    """Remove the link file, and recover from the .BAK file"""
    for topic in topics:
        for f in _getfiles(_prefixtopic(topic)):
            f = _there(_rpenv(f))
            backup = f + '.BAK'
            if isfile(f):
                os.remove(f)
            if isfile(backup):
                os.rename(backup, f)


def _getdir(fullname):
    """Get dir of a file"""
    return os.path.split(fullname)[0]


def _getshortname(fullname):
    """Get short name of a file"""
    return os.path.split(fullname)[1]


def _rpenv(string):
    """Replace env var with its value."""
    import re
    found = re.findall('\\${.*?}', string)
    if len(found) == 0:
        return string
    fn_value = string  # /home/user/.vimrc
    # bracketed environment variable
    for bkt_var in found:
        var = bkt_var[2:-1]  # remove ${}
        if var in os.environ:
            fn_value = fn_value.replace(bkt_var, os.environ[var])
        else:
            raise ValueError(
                'environment variable `${}` not exist'.format(bkt_var))
        return fn_value
    # TODO: indent of return?


def _rmhome(string):
    home = os.environ['HOME']
    if string.find(home) == 0:
        return string[len(home):]
    return join('ROOT', _rmslash(string))


def _here(there):
    # add relative file to abs path BUFFER
    abs_ = os.path.abspath(there)
    return join('BUFFER', _rmslash(_rmhome(abs_)))


def _there(here):
    if here.find('ROOT') in (0, 2):
        return here[here.index('ROOT') + len('ROOT'):]
    if here.find('.' + os.path.sep) == 0:
        return join(os.environ['HOME'], here[2:])
    return join(os.environ['HOME'], here)


def add(files):
    """Add file(s) into buffer."""
    if len(files) == 0:
        print('Nothing specified, nothing added.')
    else:
        from shutil import copyfile, copytree
        for f in files:
            before = abspath(_rpenv(f))
            after = _here(before)
            if isdir(before):
                copytree(before, after)
                return
            if not isdir(_getdir(after)):
                os.makedirs(_getdir(after))
            copyfile(before, after)


def status():
    if isdir('BUFFER') and len(_getfiles('BUFFER')) != 0:
        print('Files staged in the buffer:')
        print(_getfiles('BUFFER'))
    else:
        print('Nothing in the buffer.')


def save(topic):
    """Store the files in the buffer to a topic."""
    if not (isdir('BUFFER') and len(_getfiles('BUFFER')) != 0):
        print('Fatal: no file staged in the buffer')
        print('  (use `{} add <file> ...` to stage files)'.format(sys.argv[0]))
    else:
        for f in _getfiles('BUFFER'):
            os.renames(join('.', 'BUFFER', _rmslash(f)),
                       join(_prefixtopic(topic), _rmslash(f)))
        os.removedirs(join('.', 'BUFFER'))


def commit(topic):
    save(topic)
    apply_(topic)


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description='Manage your dotfiles.')
    parser.add_argument('target', nargs='*')
    parser.add_argument('-y', '--apply',
                        dest='todo', action='store_const',
                        const=apply_, default=apply_,
                        help='(default) symlink dotfiles')
    parser.add_argument('-r', '--recover',
                        dest='todo', action='store_const',
                        const=recover,
                        help='recover the situation before apply')
    parser.add_argument('-l', '--list',
                        dest='todo', action='store_const',
                        const=list_,
                        help='list files of topics')
    parser.add_argument('-A', '--all',
                        dest='all_', action='store_true',
                        help='display all topics')
    parser.add_argument('-a', '--add',
                        dest='todo', action='store_const',
                        const=add,
                        help='stage files to the BUFFER')
    parser.add_argument('-s', '--status',
                        dest='todo', action='store_const',
                        const=status,
                        help='show staged files')
    parser.add_argument('-S', '--save',
                        dest='todo', action='store_const',
                        const=save,
                        help='save files in the BUFFER to a topic')
    args = parser.parse_args()
    if args.todo is list_:
        list_(args.target, all_=args.all_)
    elif args.todo is status:
        status()
    elif args.todo is save:
        save(args.target[0])
    else:
        args.todo(args.target)
